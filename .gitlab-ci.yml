stages:
  - test
  - build
  - deploy

run_tests:
  stage: test
  image: python:3.10-slim-buster
  before_script:
    - apt-get update -qq && apt-get install -y 
    - pip install -r requirements.txt
  script:
    - pytest

build_image:
  stage: build
  image: docker:20.10.22
  services:
    - docker:20.10.22-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE_NAME: "ppyzel/zgdk"
    IMAGE_TAG: "0.1"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    # - docker build --arch=arm64 -t $IMAGE_NAME:$IMAGE_TAG .
    - docker buildx build --platform linux/arm64 -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

# build_image:
#   stage: build
#   image: ubuntu:20.04
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#     IMAGE_NAME: "ppyzel/zgdk"
#     IMAGE_TAG: "0.1"
#   # services:
#   #   - docker:20.10.22-dind
#   before_script:
#     - apt-get update
#     - DEBIAN_FRONTEND=noninteractive apt-get -y install ca-certificates curl gnupg lsb-release lvm2
#     - mkdir -p /etc/apt/keyrings
#     - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
#     - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
#     - apt-get update
#     - DEBIAN_FRONTEND=noninteractive apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
#     - dockerd
#     - echo $DOCKER_HOST
#   script:
#     - docker build -t $IMAGE_NAME:$IMAGE_TAG .
#     - docker tag $IMAGE_NAME:$IMAGE_TAG
#     - docker push $IMAGE_NAME:$IMAGE_TAG

deploy_to_server:
  stage: deploy
  image: ubuntu:20.04
  services:
    - docker:20.10.22-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apt-get update -qq && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - cat "$SSH_PRIVATE_KEY" | ssh-add -
  script:
    - ssh -o "StrictHostKeyChecking=no" ubuntu@138.3.245.125 "cd Projects/zgdk && docker pull ppyzel/zgdk:0.1 && docker run -d -e ZAGADKA_TOKEN=${ZAGADKA_TOKEN} --platform=linux/aarch64 ppyzel/zgdk:0.1"
  only:
    - main
