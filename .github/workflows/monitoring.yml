name: System Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [main]
    paths:
      - 'monitoring/**'
      - '.github/workflows/monitoring.yml'

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp pyyaml
    
    - name: Run health checks
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create simple health check script
        cat > quick_health_check.py << 'EOF'
        import asyncio
        import json
        import sys
        from monitoring.monitor import ZGDKMonitor

        async def quick_check():
            monitor = ZGDKMonitor()
            await monitor.run_health_checks()
            
            # Check for failures
            with open('monitoring/status.json', 'r') as f:
                status = json.load(f)
            
            failures = status['summary']['down'] + status['summary']['degraded']
            
            if failures > 0:
                print(f"ALERT: {failures} services are unhealthy!")
                for check in status['checks']:
                    if check['status'] in ['down', 'degraded']:
                        print(f"- {check['service']}: {check['status']} - {check['message']}")
                sys.exit(1)
            else:
                print("All services are healthy!")
                sys.exit(0)

        asyncio.run(quick_check())
        EOF
        
        python quick_health_check.py
    
    - name: Upload status artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-status
        path: |
          monitoring/status.json
          monitoring/status.html
    
    - name: Update status badge
      if: always()
      run: |
        # Create status badge data
        if [ -f monitoring/status.json ]; then
          python -c "
        import json
        with open('monitoring/status.json', 'r') as f:
            data = json.load(f)
        total = data['summary']['total']
        healthy = data['summary']['healthy']
        
        if healthy == total:
            color = 'brightgreen'
            status = 'operational'
        elif data['summary']['down'] == 0:
            color = 'yellow'
            status = 'degraded'
        else:
            color = 'red'
            status = 'down'
        
        badge_data = {
            'schemaVersion': 1,
            'label': 'system status',
            'message': status,
            'color': color
        }
        
        with open('status-badge.json', 'w') as f:
            json.dump(badge_data, f)
        "
        fi
    
    - name: Deploy status page
      if: success() && github.ref == 'refs/heads/main'
      run: |
        # This is a placeholder for deploying to GitHub Pages or other hosting
        # You can uncomment and configure as needed
        
        # Example: Deploy to GitHub Pages
        # - uses: peaceiris/actions-gh-pages@v3
        #   with:
        #     github_token: ${{ secrets.GITHUB_TOKEN }}
        #     publish_dir: ./monitoring
        #     destination_dir: status
        
        echo "Status page generated at monitoring/status.html"
    
    - name: Send notifications on failure
      if: failure()
      run: |
        # Send notification via webhook if configured
        if [ ! -z "${{ secrets.MONITORING_WEBHOOK_URL }}" ]; then
          curl -X POST ${{ secrets.MONITORING_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "⚠️ ZGDK System Alert: Health checks failed!",
              "blocks": [{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*ZGDK Monitoring Alert*\nOne or more services are experiencing issues.\n\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                }
              }]
            }'
        fi

  docker-health:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Docker Compose configuration
      run: |
        docker-compose config > /dev/null
        echo "Docker Compose configuration is valid"
    
    - name: Validate Dockerfile
      run: |
        docker build --no-cache --check . || echo "Dockerfile validation completed"

  status-page-update:
    runs-on: ubuntu-latest
    needs: health-check
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download status artifacts
      uses: actions/download-artifact@v4
      with:
        name: monitoring-status
        path: monitoring
    
    - name: Generate combined status report
      run: |
        if [ -f monitoring/status.json ]; then
          echo "## System Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          python -c "
        import json
        with open('monitoring/status.json', 'r') as f:
            data = json.load(f)
        
        print(f\"**Total Services:** {data['summary']['total']}\")
        print(f\"**Healthy:** {data['summary']['healthy']} ✅\")
        print(f\"**Degraded:** {data['summary']['degraded']} ⚠️\")
        print(f\"**Down:** {data['summary']['down']} ❌\")
        print()
        print('### Service Details')
        print()
        
        for check in data['checks']:
            emoji = '✅' if check['status'] == 'healthy' else '⚠️' if check['status'] == 'degraded' else '❌'
            print(f\"- **{check['service']}**: {emoji} {check['status']} - {check['message']}\")
        " >> $GITHUB_STEP_SUMMARY
        fi