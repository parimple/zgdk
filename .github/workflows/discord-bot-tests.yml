name: Discord Bot Integration Tests

on:
  push:
    branches: [ main, develop, refactor/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: postgres_test
  POSTGRES_PORT: 5432

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Install Playwright browsers
      run: |
        python -m playwright install chromium

    - name: Run database migrations
      env:
        POSTGRES_HOST: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: postgres_test
        POSTGRES_PORT: 5432
      run: |
        python -c "
        import asyncio
        from sqlalchemy.ext.asyncio import create_async_engine
        from datasources.models import Base
        
        async def create_tables():
            engine = create_async_engine('postgresql+asyncpg://postgres:postgres@localhost:5432/postgres_test')
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            await engine.dispose()
        
        asyncio.run(create_tables())
        "

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Run linting
      run: |
        pip install pylint black isort
        black --check .
        isort --check-only .
        pylint --fail-under=8.0 cogs/ core/ utils/ datasources/ || true

    - name: Run integration tests (if secrets available)
      env:
        CLAUDE_BOT: ${{ secrets.CLAUDE_BOT }}
        ZAGADKA_TOKEN: ${{ secrets.ZAGADKA_TOKEN }}
        TIPO_API_TOKEN: ${{ secrets.TIPO_API_TOKEN }}
      run: |
        if [ -n "$CLAUDE_BOT" ]; then
          echo "Running integration tests with bot tokens..."
          python tests/integration/test_shop_integration.py
        else
          echo "Skipping integration tests - bot tokens not available"
        fi

    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results" > test_results.md
        echo "- Unit Tests: $(if [ $? -eq 0 ]; then echo "✅ PASSED"; else echo "❌ FAILED"; fi)" >> test_results.md
        echo "- Linting: $(if [ $? -eq 0 ]; then echo "✅ PASSED"; else echo "❌ FAILED"; fi)" >> test_results.md
        echo "- Integration Tests: $(if [ -n "$CLAUDE_BOT" ]; then echo "✅ RUN"; else echo "⏭️ SKIPPED"; fi)" >> test_results.md
        cat test_results.md

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test_results.md
          pytest-report.xml
          coverage.xml
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_PYTHON_BLACK: true
        VALIDATE_PYTHON_PYLINT: true
        VALIDATE_DOCKERFILE: true