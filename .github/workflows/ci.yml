name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check isort
      run: isort --check-only .

    - name: Run code quality checks & tests
      run: |
        chmod +x run_checks.sh
        ./run_checks.sh

  docker-integration:
    name: Docker Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create test configuration
      run: |
        # Create minimal config for testing
        cat > config.yml << EOF
        guild_id: 123456789
        prefix: ","
        channels: {}
        force_channel_notifications: true
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t zgdk:test .
        docker images zgdk:test
    
    - name: Test Docker Compose setup
      run: |
        # Create test docker-compose override
        cat > docker-compose.test.yml << EOF
        services:
          postgres:
            image: postgres:13
            environment:
              POSTGRES_PASSWORD: postgres
              POSTGRES_DB: testdb
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U postgres"]
              interval: 5s
              timeout: 5s
              retries: 5
          
          bot:
            build: .
            depends_on:
              postgres:
                condition: service_healthy
            environment:
              - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/testdb
            command: python -c "
              import sys, os;
              print('🔍 Testing bot initialization in test mode...');
              
              # Set test environment variables
              os.environ['ZAGADKA_TOKEN'] = 'test_token_for_ci_only_no_discord_connection';
              os.environ['POSTGRES_USER'] = 'postgres';
              os.environ['POSTGRES_PASSWORD'] = 'postgres';
              os.environ['POSTGRES_DB'] = 'testdb';
              os.environ['POSTGRES_PORT'] = '5432';
              
              try:
                  # Test imports
                  print('📦 Testing imports...');
                  from main import Zagadka, load_config, setup_logging;
                  print('✅ Core modules imported successfully');
                  
                  # Test bot initialization in test mode
                  print('🤖 Testing bot initialization...');
                  config = load_config();
                  bot = Zagadka(config=config, test=True);
                  print('✅ Bot initialized in test mode');
                  
                  # Test database connection setup
                  print('🗄️ Testing database setup...');
                  assert bot.engine is not None;
                  assert bot.SessionLocal is not None;
                  print('✅ Database components initialized');
                  
                  # Test cog discovery (without loading)
                  print('🔌 Testing cog discovery...');
                  import os;
                  cog_count = 0;
                  for folder in ['cogs/commands', 'cogs/events']:
                      if os.path.exists(folder):
                          cog_count += len([f for f in os.listdir(folder) if f.endswith('.py') and f != '__init__.py']);
                  print(f'✅ Found {cog_count} cogs ready to load');
                  
                  print('🎉 All Docker integration tests passed!');
                  print('🚀 Bot is ready for production deployment');
                  sys.exit(0);
                  
              except ImportError as e:
                  print(f'❌ Import error: {e}');
                  sys.exit(1);
              except Exception as e:
                  print(f'❌ Initialization error: {e}');
                  import traceback;
                  traceback.print_exc();
                  sys.exit(1);
              "
        EOF
    
    - name: Run integration tests
      run: |
        echo "🚀 Starting integration test..."
        docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
        
        echo "🧹 Cleaning up test containers..."
        docker-compose -f docker-compose.test.yml down -v
    
    - name: Validate Docker image efficiency
      run: |
        echo "📊 Docker image analysis:"
        docker images zgdk:test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        
        # Check if image size is reasonable (should be < 1GB for Python app)
        SIZE=$(docker images zgdk:test --format "{{.Size}}" | sed 's/MB//' | sed 's/GB/*1024/' | bc -l 2>/dev/null || echo "0")
        echo "Image size: ${SIZE}MB"

  # Optional: Enable this when Docker Hub secrets are configured
  # docker-publish:
  #   name: Publish Docker Image
  #   needs: [unit-tests, docker-integration]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}
  #   
  #   - name: Build and push
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       platforms: linux/amd64,linux/arm64
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKERHUB_USERNAME }}/zgdk:latest
  #         ${{ secrets.DOCKERHUB_USERNAME }}/zgdk:${{ github.sha }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max 