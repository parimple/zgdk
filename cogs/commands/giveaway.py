"""Giveaway commands for randomly selecting messages from a channel."""

import logging
import random
from typing import Optional

import discord
from discord import app_commands
from discord.ext import commands

from utils.message_sender import MessageSender

logger = logging.getLogger(__name__)


class GiveawayCog(commands.Cog):
    """Cog for giveaway-related commands."""

    def __init__(self, bot):
        self.bot = bot
        self.message_sender = MessageSender()

    @commands.hybrid_command(aliases=["gws"])
    @commands.has_permissions(administrator=True)
    @discord.app_commands.describe(
        winners_count="Liczba wygranych do wylosowania",
        channel="Kana≈Ç z kt√≥rego losowaƒá wiadomo≈õci (opcjonalnie)",
    )
    async def giveawayss(
        self,
        ctx,
        winners_count: int,
        channel: Optional[discord.TextChannel] = None,
    ):
        """Losuj okre≈õlonƒÖ liczbƒô wiadomo≈õci z kana≈Çu."""
        if winners_count < 1:
            await self.message_sender.send_error(
                ctx, "Liczba wygranych musi byƒá wiƒôksza od 0!"
            )
            return

        # U≈ºyj bie≈ºƒÖcego kana≈Çu je≈õli nie podano innego
        target_channel = channel or ctx.channel

        # Zbierz wszystkie wiadomo≈õci z kana≈Çu
        messages = []
        async for message in target_channel.history(limit=None):
            if (
                message.author.bot and not message.webhook_id
            ):  # Pomijamy boty, ale nie webhooki
                continue
            messages.append(message)

        if not messages:
            await self.message_sender.send_error(ctx, "Brak wiadomo≈õci do wylosowania!")
            return

        # Losuj wiadomo≈õci
        winners = []
        used_authors = set()  # Zbi√≥r ID autor√≥w, kt√≥rzy ju≈º zostali wylosowani
        remaining_messages = messages.copy()

        while len(winners) < winners_count and remaining_messages:
            message = random.choice(remaining_messages)
            remaining_messages.remove(message)

            # Dla wiadomo≈õci od webhook√≥w nie sprawdzamy unikalno≈õci autora
            if not message.webhook_id:
                # Je≈õli autor ju≈º wygra≈Ç, pomi≈Ñ tƒô wiadomo≈õƒá
                if message.author.id in used_authors:
                    continue
                used_authors.add(message.author.id)

            winners.append(message)

            # Je≈õli nie ma ju≈º wystarczajƒÖcej liczby wiadomo≈õci, przerwij
            if len(remaining_messages) < (winners_count - len(winners)):
                break

        # Przygotuj i wy≈õlij wyniki
        if not winners:
            await self.message_sender.send_error(
                ctx, "Nie uda≈Ço siƒô wylosowaƒá ≈ºadnej wiadomo≈õci!"
            )
            return

        # Wy≈õlij wyniki
        await self.message_sender.send_giveaway_results(
            ctx, winners, target_channel, winners_count
        )

    @commands.hybrid_command(
        name="giveawayr", description="Losuje u≈ºytkownika z wybranych r√≥l."
    )
    @commands.has_role("‚ú™")
    @discord.app_commands.describe(
        role1="Pierwsza rola do losowania (wymagana)",
        role2="Druga rola do losowania (opcjonalna)",
        role3="Trzecia rola do losowania (opcjonalna)",
        mode="Tryb sprawdzania r√≥l: 'or' (dowolna z r√≥l) lub 'and' (wszystkie role)",
    )
    async def giveawayr(
        self,
        ctx: commands.Context,
        role1: str,
        role2: str = None,
        role3: str = None,
        mode: str = "and",
    ):
        """Losuje u≈ºytkownika z wybranych r√≥l.

        Przyk≈Çad u≈ºycia:
        ,giveawayr "Nazwa Roli 1" "Nazwa Roli 2" "Nazwa Roli 3" or  # Losuje u≈ºytkownika z dowolnƒÖ z tych r√≥l
        ,giveawayr "Nazwa Roli 1" "Nazwa Roli 2"                    # Losuje u≈ºytkownika z obiema rolami (domy≈õlnie and)
        """
        # Sprawd≈∫ czy u≈ºytkownik ma rolƒô administratora
        if not discord.utils.get(
            ctx.author.roles, id=self.bot.config["admin_roles"]["admin"]
        ):
            await ctx.send("Ta komenda jest dostƒôpna tylko dla administrator√≥w.")
            return

        # Konwertuj nazwy r√≥l na obiekty r√≥l
        roles = []
        for role_name in [role1, role2, role3]:
            if role_name:
                # Dla slash command, role_name bƒôdzie ju≈º obiektem Role
                if isinstance(role_name, discord.Role):
                    roles.append(role_name)
                else:
                    # Dla wersji z prefixem, szukamy roli po nazwie
                    role = discord.utils.get(ctx.guild.roles, name=role_name)
                    if role:
                        roles.append(role)
                    else:
                        await ctx.send(f"Nie znaleziono roli o nazwie: {role_name}")
                        return

        # Sprawd≈∫ poprawno≈õƒá trybu
        mode = mode.lower()
        if mode not in ["or", "and"]:
            mode = "and"  # Domy≈õlnie u≈ºywamy AND je≈õli podano nieprawid≈Çowy tryb

        # Zbierz wszystkich cz≈Çonk√≥w serwera
        eligible_members = []
        for member in ctx.guild.members:
            if not member.bot:  # Pomijamy boty
                if mode == "or":
                    # Tryb OR - wystarczy mieƒá jednƒÖ z r√≥l
                    if any(role in member.roles for role in roles):
                        eligible_members.append(member)
                else:
                    # Tryb AND - musi mieƒá wszystkie role
                    if all(role in member.roles for role in roles):
                        eligible_members.append(member)

        if not eligible_members:
            role_names = ", ".join(f"'{role.name}'" for role in roles)
            await ctx.send(
                f"Nie znaleziono ≈ºadnych u≈ºytkownik√≥w z wymaganymi rolami ({role_names}) "
                f"w trybie {mode.upper()}."
            )
            return

        # Wylosuj zwyciƒôzcƒô
        winner = random.choice(eligible_members)

        # Przygotuj wiadomo≈õƒá z informacjƒÖ o rolach (bez pingowania)
        role_info = " ".join(f"'{role.name}'" for role in roles)
        mode_info = "dowolnej z" if mode == "or" else "wszystkich"

        await ctx.send(
            f"üéâ Wylosowano zwyciƒôzcƒô spo≈õr√≥d u≈ºytkownik√≥w z {mode_info} r√≥l: {role_info}\n"
            f"Zwyciƒôzca: {winner.mention}\n"
            f"Liczba uprawnionych u≈ºytkownik√≥w: {len(eligible_members)}"
        )

    # Osobna wersja dla slash command
    @giveawayr.app_command.error
    async def giveawayr_app_command_error(
        self, interaction: discord.Interaction, error: app_commands.CommandInvokeError
    ):
        # Konwertuj parametry z discord.Role na str dla wersji z prefixem
        if isinstance(error.original, commands.CommandInvokeError):
            ctx = await self.bot.get_context(interaction)
            roles = []
            for param in interaction.namespace:
                if isinstance(param, discord.Role):
                    roles.append(param.name)
                else:
                    roles.append(param)
            await self.giveawayr(ctx, *roles)


async def setup(bot):
    """Add the cog to the bot."""
    await bot.add_cog(GiveawayCog(bot))
